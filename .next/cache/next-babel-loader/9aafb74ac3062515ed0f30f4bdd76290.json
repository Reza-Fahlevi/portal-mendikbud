{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _jsxFileName = \"D:\\\\Project\\\\portal-mendikbud\\\\src\\\\pages\\\\_app.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  ::-moz-selection\\n    color: \", \";\\n    background: \", \";\\n  }\\n\\n  ::selection {\\n    color: \", \";\\n    background: \", \";\\n  }\\n\\n  body {\\n    background: \", \";\\n    color: \", \";\\n    font-family: \", \";\\n    margin: 0px;\\n    padding: 0;\\n    transition: \", \";\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from 'react';\nimport Head from 'next/head';\nimport { createGlobalStyle, ThemeProvider } from 'styled-components';\nimport 'react-multi-carousel/lib/styles.css';\nimport { useDarkMode } from '../utils/useDarkMode';\nimport { lightTheme, darkTheme } from '../utils/Themes';\nimport Meta from '../utils/Meta';\nimport { getMeta } from '../utils/FirebaseRequest';\nvar Global = createGlobalStyle(_templateObject(), function (_ref) {\n  var theme = _ref.theme;\n  return theme.background;\n}, function (_ref2) {\n  var theme = _ref2.theme;\n  return theme.primary;\n}, function (_ref3) {\n  var theme = _ref3.theme;\n  return theme.background;\n}, function (_ref4) {\n  var theme = _ref4.theme;\n  return theme.primary;\n}, function (_ref5) {\n  var theme = _ref5.theme;\n  return theme.background;\n}, function (_ref6) {\n  var theme = _ref6.theme;\n  return theme.secondary;\n}, function (_ref7) {\n  var theme = _ref7.theme;\n  return theme.font;\n}, function (_ref8) {\n  var theme = _ref8.theme;\n  return theme.transition;\n});\n_c = Global;\n\nfunction App(props) {\n  _s();\n\n  var Component = props.Component;\n\n  var _useDarkMode = useDarkMode(),\n      _useDarkMode2 = _slicedToArray(_useDarkMode, 2),\n      theme = _useDarkMode2[0],\n      themeToggler = _useDarkMode2[1];\n\n  var themeMode = theme === 'light' ? lightTheme : darkTheme;\n  return __jsx(ThemeProvider, {\n    theme: themeMode,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 5\n    }\n  }, __jsx(React.Fragment, null, __jsx(Global, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }\n  }), __jsx(Component\n  /*{...pageProps}*/\n  , {\n    theme: themeMode,\n    toggle: themeToggler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }\n  })));\n} // App.getInitialProps = async () => {\n//   const responseMeta = await getMeta()\n//   return {\n//     responseMeta\n//   }\n// }\n\n\n_s(App, \"saMS7KGgBxrQmVrCefyFfk5oLwk=\", false, function () {\n  return [useDarkMode];\n});\n\n_c2 = App;\nexport default App;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Global\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"sources":["D:/Project/portal-mendikbud/src/pages/_app.js"],"names":["React","Head","createGlobalStyle","ThemeProvider","useDarkMode","lightTheme","darkTheme","Meta","getMeta","Global","theme","background","primary","secondary","font","transition","App","props","Component","themeToggler","themeMode"],"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,SAASC,iBAAT,EAA4BC,aAA5B,QAAiD,mBAAjD;AAEA,OAAO,qCAAP;AAEA,SAASC,WAAT,QAA4B,sBAA5B;AACA,SAASC,UAAT,EAAqBC,SAArB,QAAsC,iBAAtC;AACA,OAAOC,IAAP,MAAiB,eAAjB;AACA,SAASC,OAAT,QAAwB,0BAAxB;AAEA,IAAMC,MAAM,GAAGP,iBAAH,oBAEC;AAAA,MAAGQ,KAAH,QAAGA,KAAH;AAAA,SAAeA,KAAK,CAACC,UAArB;AAAA,CAFD,EAGM;AAAA,MAAGD,KAAH,SAAGA,KAAH;AAAA,SAAeA,KAAK,CAACE,OAArB;AAAA,CAHN,EAOC;AAAA,MAAGF,KAAH,SAAGA,KAAH;AAAA,SAAeA,KAAK,CAACC,UAArB;AAAA,CAPD,EAQM;AAAA,MAAGD,KAAH,SAAGA,KAAH;AAAA,SAAeA,KAAK,CAACE,OAArB;AAAA,CARN,EAYM;AAAA,MAAGF,KAAH,SAAGA,KAAH;AAAA,SAAeA,KAAK,CAACC,UAArB;AAAA,CAZN,EAaC;AAAA,MAAGD,KAAH,SAAGA,KAAH;AAAA,SAAeA,KAAK,CAACG,SAArB;AAAA,CAbD,EAcO;AAAA,MAAGH,KAAH,SAAGA,KAAH;AAAA,SAAeA,KAAK,CAACI,IAArB;AAAA,CAdP,EAiBM;AAAA,MAAGJ,KAAH,SAAGA,KAAH;AAAA,SAAeA,KAAK,CAACK,UAArB;AAAA,CAjBN,CAAZ;KAAMN,M;;AAqBN,SAASO,GAAT,CAAaC,KAAb,EAAoB;AAAA;;AAAA,MAEhBC,SAFgB,GAOdD,KAPc,CAEhBC,SAFgB;;AAAA,qBASYd,WAAW,EATvB;AAAA;AAAA,MASXM,KATW;AAAA,MASJS,YATI;;AAWlB,MAAMC,SAAS,GAAGV,KAAK,KAAK,OAAV,GAAoBL,UAApB,GAAiCC,SAAnD;AAEA,SACE,MAAC,aAAD;AAAe,IAAA,KAAK,EAAEc,SAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,4BACE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAGE,MAAC;AAAU;AAAX;AAA8B,IAAA,KAAK,EAAEA,SAArC;AAAgD,IAAA,MAAM,EAAED,YAAxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF,CADF,CADF;AASD,C,CAED;AACA;AAEA;AACA;AACA;AACA;;;GA9BSH,G;UASuBZ,W;;;MATvBY,G;AAgCT,eAAeA,GAAf","sourcesContent":["import React from 'react'\nimport Head from 'next/head'\nimport { createGlobalStyle, ThemeProvider } from 'styled-components'\n\nimport 'react-multi-carousel/lib/styles.css'\n\nimport { useDarkMode } from '../utils/useDarkMode'\nimport { lightTheme, darkTheme } from '../utils/Themes'\nimport Meta from '../utils/Meta'\nimport { getMeta } from '../utils/FirebaseRequest';\n\nconst Global = createGlobalStyle`\n  ::-moz-selection\n    color: ${({ theme }) => theme.background};\n    background: ${({ theme }) => theme.primary};\n  }\n\n  ::selection {\n    color: ${({ theme }) => theme.background};\n    background: ${({ theme }) => theme.primary};\n  }\n\n  body {\n    background: ${({ theme }) => theme.background};\n    color: ${({ theme }) => theme.secondary};\n    font-family: ${({ theme }) => theme.font};\n    margin: 0px;\n    padding: 0;\n    transition: ${({ theme }) => theme.transition};\n  }\n`\n\nfunction App(props) {\n  const { \n    Component,\n    //  pageProps,\n    // responseMeta: {\n    //   description, image, name, site\n    // }\n  } = props\n  \n  const [theme, themeToggler] = useDarkMode()\n\n  const themeMode = theme === 'light' ? lightTheme : darkTheme\n\n  return (\n    <ThemeProvider theme={themeMode}>\n      <>\n        <Global />\n        {/* <Meta description={description} image={image} name={name} site={site} /> */}\n        <Component /*{...pageProps}*/ theme={themeMode} toggle={themeToggler} />\n      </>\n    </ThemeProvider>\n  )\n}\n\n// App.getInitialProps = async () => {\n//   const responseMeta = await getMeta()\n\n//   return {\n//     responseMeta\n//   }\n// }\n\nexport default App\n"]},"metadata":{},"sourceType":"module"}