{"ast":null,"code":"var _jsxFileName = \"/Users/regopantes/Project/portal-mendikbud/src/pages/_app.js\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport Head from 'next/head';\nimport { createGlobalStyle, ThemeProvider } from 'styled-components';\nimport 'react-multi-carousel/lib/styles.css';\nimport { useDarkMode } from '../utils/useDarkMode';\nimport { lightTheme, darkTheme } from '../utils/Themes';\nimport Meta from '../utils/Meta';\nimport { getMeta } from '../utils/FirebaseRequest';\nconst Global = createGlobalStyle`\n  ::-moz-selection\n    color: ${({\n  theme\n}) => theme.background};\n    background: ${({\n  theme\n}) => theme.primary};\n  }\n\n  ::selection {\n    color: ${({\n  theme\n}) => theme.background};\n    background: ${({\n  theme\n}) => theme.primary};\n  }\n\n  body {\n    background: ${({\n  theme\n}) => theme.background};\n    color: ${({\n  theme\n}) => theme.secondary};\n    font-family: ${({\n  theme\n}) => theme.font};\n    margin: 0px;\n    padding: 0;\n    transition: ${({\n  theme\n}) => theme.transition};\n  }\n`;\n\nfunction App(props) {\n  const {\n    Component //  pageProps,\n    // responseMeta: {\n    //   description, image, name, site\n    // }\n\n  } = props;\n  const [theme, themeToggler] = useDarkMode();\n  const themeMode = theme === 'light' ? lightTheme : darkTheme;\n  return __jsx(ThemeProvider, {\n    theme: themeMode,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 5\n    }\n  }, __jsx(React.Fragment, null, __jsx(Global, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }\n  }), __jsx(Component\n  /*{...pageProps}*/\n  , {\n    theme: themeMode,\n    toggle: themeToggler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }\n  })));\n} // App.getInitialProps = async () => {\n//   const responseMeta = await getMeta()\n//   return {\n//     responseMeta\n//   }\n// }\n\n\nexport default App;","map":{"version":3,"sources":["/Users/regopantes/Project/portal-mendikbud/src/pages/_app.js"],"names":["React","Head","createGlobalStyle","ThemeProvider","useDarkMode","lightTheme","darkTheme","Meta","getMeta","Global","theme","background","primary","secondary","font","transition","App","props","Component","themeToggler","themeMode"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,SAASC,iBAAT,EAA4BC,aAA5B,QAAiD,mBAAjD;AAEA,OAAO,qCAAP;AAEA,SAASC,WAAT,QAA4B,sBAA5B;AACA,SAASC,UAAT,EAAqBC,SAArB,QAAsC,iBAAtC;AACA,OAAOC,IAAP,MAAiB,eAAjB;AACA,SAASC,OAAT,QAAwB,0BAAxB;AAEA,MAAMC,MAAM,GAAGP,iBAAkB;;aAEpB,CAAC;AAAEQ,EAAAA;AAAF,CAAD,KAAeA,KAAK,CAACC,UAAW;kBAC3B,CAAC;AAAED,EAAAA;AAAF,CAAD,KAAeA,KAAK,CAACE,OAAQ;;;;aAIlC,CAAC;AAAEF,EAAAA;AAAF,CAAD,KAAeA,KAAK,CAACC,UAAW;kBAC3B,CAAC;AAAED,EAAAA;AAAF,CAAD,KAAeA,KAAK,CAACE,OAAQ;;;;kBAI7B,CAAC;AAAEF,EAAAA;AAAF,CAAD,KAAeA,KAAK,CAACC,UAAW;aACrC,CAAC;AAAED,EAAAA;AAAF,CAAD,KAAeA,KAAK,CAACG,SAAU;mBACzB,CAAC;AAAEH,EAAAA;AAAF,CAAD,KAAeA,KAAK,CAACI,IAAK;;;kBAG3B,CAAC;AAAEJ,EAAAA;AAAF,CAAD,KAAeA,KAAK,CAACK,UAAW;;CAjBlD;;AAqBA,SAASC,GAAT,CAAaC,KAAb,EAAoB;AAClB,QAAM;AACJC,IAAAA,SADI,CAEJ;AACA;AACA;AACA;;AALI,MAMFD,KANJ;AAQA,QAAM,CAACP,KAAD,EAAQS,YAAR,IAAwBf,WAAW,EAAzC;AAEA,QAAMgB,SAAS,GAAGV,KAAK,KAAK,OAAV,GAAoBL,UAApB,GAAiCC,SAAnD;AAEA,SACE,MAAC,aAAD;AAAe,IAAA,KAAK,EAAEc,SAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,4BACE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAGE,MAAC;AAAU;AAAX;AAA8B,IAAA,KAAK,EAAEA,SAArC;AAAgD,IAAA,MAAM,EAAED,YAAxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF,CADF,CADF;AASD,C,CAED;AACA;AAEA;AACA;AACA;AACA;;;AAEA,eAAeH,GAAf","sourcesContent":["import React from 'react'\nimport Head from 'next/head'\nimport { createGlobalStyle, ThemeProvider } from 'styled-components'\n\nimport 'react-multi-carousel/lib/styles.css'\n\nimport { useDarkMode } from '../utils/useDarkMode'\nimport { lightTheme, darkTheme } from '../utils/Themes'\nimport Meta from '../utils/Meta'\nimport { getMeta } from '../utils/FirebaseRequest';\n\nconst Global = createGlobalStyle`\n  ::-moz-selection\n    color: ${({ theme }) => theme.background};\n    background: ${({ theme }) => theme.primary};\n  }\n\n  ::selection {\n    color: ${({ theme }) => theme.background};\n    background: ${({ theme }) => theme.primary};\n  }\n\n  body {\n    background: ${({ theme }) => theme.background};\n    color: ${({ theme }) => theme.secondary};\n    font-family: ${({ theme }) => theme.font};\n    margin: 0px;\n    padding: 0;\n    transition: ${({ theme }) => theme.transition};\n  }\n`\n\nfunction App(props) {\n  const { \n    Component,\n    //  pageProps,\n    // responseMeta: {\n    //   description, image, name, site\n    // }\n  } = props\n  \n  const [theme, themeToggler] = useDarkMode()\n\n  const themeMode = theme === 'light' ? lightTheme : darkTheme\n\n  return (\n    <ThemeProvider theme={themeMode}>\n      <>\n        <Global />\n        {/* <Meta description={description} image={image} name={name} site={site} /> */}\n        <Component /*{...pageProps}*/ theme={themeMode} toggle={themeToggler} />\n      </>\n    </ThemeProvider>\n  )\n}\n\n// App.getInitialProps = async () => {\n//   const responseMeta = await getMeta()\n\n//   return {\n//     responseMeta\n//   }\n// }\n\nexport default App\n"]},"metadata":{},"sourceType":"module"}